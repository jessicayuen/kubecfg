// Copyright 2017 The kubecfg authors
//
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"

	"github.com/ksonnet/kubecfg/metadata"
	"github.com/ksonnet/kubecfg/pkg/kubecfg"
)

func init() {
	RootCmd.AddCommand(envCmd)
	envCmd.AddCommand(envAddCmd)
	// TODO: We need to make this default to checking the `kubeconfig` file.
	envAddCmd.PersistentFlags().String(flagAPISpec, "version:v1.7.0",
		"Manually specify API version from OpenAPI schema, cluster, or Kubernetes version")
}

var envCmd = &cobra.Command{
	Use:   "env",
	Short: `Create, remove, modify, and list ksonnet environments`,
	RunE: func(cmd *cobra.Command, args []string) error {
		return fmt.Errorf("Command 'env' requires a subcommand\n\n%s", cmd.UsageString())
	},
}

// TODO Currently, by default, this command will overwrite the environment with
// the same name, if it exists. May want to extend the behavior later to provide
// a user prompt (y/n).
var envAddCmd = &cobra.Command{
	Use:   "add <env-name> <env-uri>",
	Short: "Add a new environment within a ksonnet project",
	RunE: func(cmd *cobra.Command, args []string) error {
		flags := cmd.Flags()
		if len(args) != 2 {
			return fmt.Errorf("'env add' takes two arguments, the name and the uri of the environment, respectively")
		}

		envName := args[0]
		envURI := args[1]

		appDir, err := os.Getwd()
		if err != nil {
			return err
		}
		appRoot := metadata.AbsPath(appDir)

		specFlag, err := flags.GetString(flagAPISpec)
		if err != nil {
			return err
		}

		c, err := kubecfg.NewEnvAddCmd(envName, envURI, specFlag, appRoot)
		if err != nil {
			return err
		}

		return c.Run()
	},
	Long: `Create a new environment within a ksonnet project. This will
generate a new directory, 'env-name', within the 'envs' directory, containing
the environment-specific files. 'env-uri' is the URI which the Kubernete's
cluster is located for the added environment.

Below is an example directory structure:

	app-name/
	  .gitignore             Default .gitignore; can customize VCS
		.ksonnet/            Metadata for ksonnet
		envs/                Env specs (defaults: dev, test, prod)
		  default/           [Default generated environment.]
		  us-west/           [Example of user-generated env]
		    staging/
			  k8s.libsonnet
			  swagger.json
			  spec.json      [This will contain the uri of the environment]
		components/          Top-level Kubernetes objects defining application
		lib/                 user-written .libsonnet files
		vendor/              mixin libraries, prototypes
`,
	Example: `  # Initialize a new staging environment at us-west. The directory
  # structure rooted at 'us-west' in the documentation above will be generated.
  ksonnet env us-west/staging https://kubecfg-1.us-west.elb.amazonaws.com

  # Initialize a new staging environment at us-west, using the OpenAPI specification
  # generated in the Kubernetes v1.7.1 build to generate 'ksonnet-lib'.
  ksonnet env us-west/staging https://kubecfg-1.us-west.elb.amazonaws.com --api-spec=version:v1.7.1

  # Initialize a new development environment locally. This will overwrite the
  # default 'default' directory structure generated by 'ksonnet-init'.
  ksonnet env default localhost:8000`,
}
